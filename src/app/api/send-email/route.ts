import { NextRequest, NextResponse } from 'next/server';
import nodemailer from 'nodemailer';

// Configure the transporter with Gmail SMTP
const transporter = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: 587,
  secure: false, // true for 465, false for other ports
  auth: {
    user: process.env.EMAIL_USER, // Your Gmail address
    pass: process.env.EMAIL_PASS // The App Password you generated
  },
  debug: true, // Show debug output
  logger: true // Log information about the mail transaction
});

export async function POST(request: NextRequest) {
  console.log('=== EMAIL API CALLED ===');
  console.log('Environment variables check:');
  console.log('EMAIL_USER:', process.env.EMAIL_USER ? 'Set' : 'Not set');
  console.log('EMAIL_PASS:', process.env.EMAIL_PASS ? 'Set' : 'Not set');
  console.log('ADMIN_EMAIL:', process.env.ADMIN_EMAIL ? 'Set' : 'Not set');
  
  try {
    // Parse the request body
    const data = await request.json();
    console.log('Request data received:', { ...data, pdfBase64: data.pdfBase64 ? 'Base64 data received (truncated)' : 'No PDF data' });
    
    const { pdfBase64, studentName, senderName } = data;
    
    if (!pdfBase64) {
      console.error('No PDF data received');
      return NextResponse.json({ 
        success: false,
        error: 'No PDF data received' 
      }, { status: 400 });
    }
    
    // Recipient email (professor's email)
    const recipientEmail = process.env.ADMIN_EMAIL || 'kummarigunta.mohan@gmail.com';
    console.log('Sending email to:', recipientEmail);
    
    // Convert base64 to buffer for attachment
    console.log('Converting base64 to buffer...');
    const pdfBuffer = Buffer.from(pdfBase64, 'base64');
    console.log('PDF buffer size:', pdfBuffer.length, 'bytes');
    
    // Define the email content
    const mailOptions = {
      from: `"${senderName || 'CHALLENGE App'}" <${process.env.EMAIL_USER}>`,
      to: recipientEmail,
      subject: 'CHALLENGE Policy Summary Submission',
      text: `A student (${studentName || 'Anonymous'}) has completed the CHALLENGE refugee education policy simulation. The attached PDF contains their policy selections, reflections, and stakeholder perspectives.`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #6E1E1E;">CHALLENGE Policy Summary</h2>
          <p>A student (${studentName || 'Anonymous'}) has completed the CHALLENGE refugee education policy simulation.</p>
          <p>The attached PDF contains their policy selections, reflections, and stakeholder perspectives.</p>
          <p style="margin-top: 20px; color: #666;">This email was automatically generated by the CHALLENGE application.</p>
        </div>
      `,
      attachments: [
        {
          filename: 'challenge-policy-summary.pdf',
          content: pdfBuffer,
          contentType: 'application/pdf',
        },
      ],
    };
    
    console.log('Email options prepared:', { ...mailOptions, attachments: 'PDF attachment (not shown)' });
    console.log('Attempting to send email...');
    
    // Send the email
    const info = await transporter.sendMail(mailOptions);
    
    console.log('Email sent successfully!');
    console.log('Message ID:', info.messageId);
    console.log('Response:', info.response);
    
    // Return success response
    return NextResponse.json({
      success: true,
      message: 'Email sent successfully',
      messageId: info.messageId,
    });
  } catch (error) {
    console.error('Error sending email:');
    console.error(error);
    
    // Detailed error information
    let errorMessage = 'Unknown error';
    let errorDetails = {};
    
    if (error instanceof Error) {
      errorMessage = error.message;
      errorDetails = {
        name: error.name,
        stack: error.stack,
      };
      
      // Check for specific Nodemailer errors
      const nodeMailerError = error as any;
      if (nodeMailerError.code) {
        errorDetails = {
          ...errorDetails,
          code: nodeMailerError.code,
          command: nodeMailerError.command,
          responseCode: nodeMailerError.responseCode,
          response: nodeMailerError.response
        };
      }
    }
    
    console.error('Error details:', errorDetails);
    
    return NextResponse.json({ 
      success: false,
      error: 'Failed to send email', 
      message: errorMessage,
      details: errorDetails
    }, { status: 500 });
  }
}
